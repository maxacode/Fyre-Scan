import requests
import csv
import json

# Define API URLs
base_url_nvd = "https://services.nvd.nist.gov/rest/json/cves/1.0/"
base_url_gemini = "https://gemini.google.com/u/1/app/"

# Read CVE IDs from JSON file
with open("cve_ids.json", "r") as f:
    cve_ids = json.load(f)

# Read Gemini API key from text file
with open("gemini_api_key.txt", "r") as f:
    gemini_api_key = f.read().strip()

# Severity categories mapping
severity_map = {
    "CRITICAL": "High",
    "HIGH": "High",
    "MEDIUM": "Medium",
    "LOW": "Low"
}

# Open the CSV file in append mode
with open("vulnerability_report.csv", "a", newline="") as csvfile:
    writer = csv.writer(csvfile)

    # Header row
    writer.writerow([
        "CVE ID",
        "Description",
        "CVSS Score",
        "Severity",
        "Affected Products",
        "Gemini Remediation",
        "Gemini Mitigation",
        "NVD Remediation"
    ])

    for cve_id in cve_ids:
        # Send a GET request to the NVD API
        try:
            response = requests.get(f"{base_url_nvd}{cve_id}")
            response.raise_for_status()

            # Parse the JSON response
            data = response.json()

            # Get vulnerability details
            cve_data = data["results"]["CVE_Items"][0]["cve"]["CVEdata"][0]

            # Extract additional information
            cvss_score = cve_data["impact"]["baseMetricV3"]["cvssV3"]["baseSeverity"]
            severity = severity_map.get(cvss_score, "Unknown")
            affected_products = "; ".join([
                product["name"] for product in cve_data["affected"]["vendor_data"]
            ])
            nvd_remediation = cve_data["references"]["reference_data"][0]["url"]

            # Prepare Gemini API request
            headers = {"Authorization": f"Bearer {gemini_api_key}"}
            payload = {"prompt": f"Summarize remediation and mitigation steps for CVE-{cve_id}."}

            # Send request to Gemini and extract response
            response = requests.post(f"{base_url_gemini}/query", headers=headers, json=payload)
            response.raise_for_status()
            gemini_response = response.json()

            # Extract Gemini recommendations
            gemini_remediation = gemini_response["choices"][0]["text"]
            gemini_mitigation = gemini_response["choices"][1]["text"]

            # Write vulnerability details to CSV
            writer.writerow([
                cve_data["CVE_data_meta"]["id"],
                cve_data["description"]["description_data"][0]["value"],
                cvss_score,
                severity,
                affected_products,
                gemini_remediation,
                gemini_mitigation,
                nvd_remediation
            ])

            print(f"Vulnerability data for {cve_id} written to vulnerability_report.csv")

        except (requests.exceptions.RequestException, KeyError, ValueError) as e:
            print(f"Error processing CVE ID {cve_id}: {e}")
            