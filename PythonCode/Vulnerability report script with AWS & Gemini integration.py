import requests
import csv
import json
import boto3

# Define API URLs
base_url_nvd = "https://services.nvd.nist.gov/rest/json/cves/1.0/"
base_url_gemini = "https://gemini.google.com/u/1/app/"

# Get environment variables for Gemini API key and S3 bucket name
gemini_api_key = os.environ['GEMINI_API_KEY']
s3_bucket_name = os.environ['S3_BUCKET_NAME']

# Severity categories mapping
severity_map = {
    "CRITICAL": "High",
    "HIGH": "High",
    "MEDIUM": "Medium",
    "LOW": "Low"
}

def lambda_handler(event, context):
    # Read CVE IDs from the S3 bucket
    s3 = boto3.client('s3')
    obj = s3.get_object(Bucket=s3_bucket_name, Key='cve_ids.json')
    cve_ids = json.loads(obj['Body'].read().decode('utf-8'))

    # Create a CSV file in memory
    csv_data = io.StringIO()
    writer = csv.writer(csv_data)

    # Write header row
    writer.writerow([
        "CVE ID",
        "Description",
        "CVSS Score",
        "Severity",
        "Affected Products",
        "Gemini Remediation",
        "Gemini Mitigation",
        "NVD Remediation"
    ])

    for cve_id in cve_ids:
        try:
            # Get vulnerability details from NVD and Gemini
            cve_data, cvss_score, severity, affected_products, nvd_remediation, gemini_remediation, gemini_mitigation = process_cve(cve_id)

            # Write vulnerability details to the CSV
            writer.writerow([
                cve_data["CVE_data_meta"]["id"],
                cve_data["description"]["description_data"][0]["value"],
                cvss_score,
                severity,
                affected_products,
                gemini_remediation,
                gemini_mitigation,
                nvd_remediation
            ])

            print(f"Vulnerability data for {cve_id} written to CSV")

        except (requests.exceptions.RequestException, KeyError, ValueError) as e:
            print(f"Error processing CVE ID {cve_id}: {e}")

    # Upload the CSV file to S3
    s3.put_object(Body=csv_data.getvalue(), Bucket=s3_bucket_name, Key='vulnerability_report.csv')

def process_cve(cve_id):
    # Send a GET request to the NVD API
    response = requests.get(f"{base_url_nvd}{cve_id}")
    response.raise_for_status()
    data = response.json()
    cve_data = data["results"]["CVE_Items"][0]["cve"]["CVEdata"][0]

    # Extract additional information from NVD
    cvss_score = cve_data["impact"]["baseMetricV3"]["cvssV3"]["baseSeverity"]
    severity = severity_map.get(cvss_score, "Unknown")
    affected_products = "; ".join([product["name"] for product in cve_data["affected"]["vendor_data"]])
    nvd_remediation = cve_data["references"]["reference_data"][0]["url"]

    # Send request to Gemini for remediation and mitigation recommendations
    headers = {"Authorization": f"Bearer {gemini_api_key}"}
    payload = {"prompt": f"Summarize remediation and mitigation steps for CVE-{cve_id}."}
    response = requests.post(f"{base_url_gemini}/query", headers=headers, json=payload)
    response.raise_for_status()
    gemini_response = response.json()
    gemini_
